{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","divRoot","document","querySelector","ReactDOM","render"],"mappings":"yMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCJlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCDPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECHwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAZAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEf,CAACpB,OAIJqB,EDlB0BK,CAAc1B,GAAlCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,sDAAd,SAAqEhB,IACnEoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GACR,OACI,cAAC,EAAD,eAEQA,GADEA,EAAIC,aEbpCgB,EAAe,WAGjB,MAAoCzC,mBAAS,IAA7C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAOA,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQS,EAAWe,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCrB3B4B,G,MAAUC,SAASC,cAAc,UAGvCC,IAASC,OACL,cAAC,EAAD,IACAJ,K","file":"static/js/main.52681b8f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) => {        \n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2){\n            setCategories(categories => [inputValue, ...categories]);\n            setInputValue('');\n        }\n\n    }\n    return (\n        <form onSubmit={handleSubmit}>                      \n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n\n        </form>\n    )\n}\n\n// export{\n//     AddCategory as default\n// }\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=pCrDM0uanySg5Sl0GkD8G60bfNM9epK8`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n\n    // console.log(id, title, url);\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","// import React, {useState, useEffect} from 'react'\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n\n    const {data: images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__bounce animate__delay-2s\">{category}</h3>\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\n            <div className=\"card-grid\">\n                \n                {            \n                    images.map( img => {\n                        return(\n                            <GifGridItem \n                                key ={img.id}\n                                {...img}\n                            />                 \n                        )\n                    })\n                }\n                \n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    \n\n    useEffect( () =>{\n       \n        getGifs( category )\n            .then( imgs => {                \n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            },[category]);\n      \n    });\n\n    return state;\n}","import React, { Fragment, useState } from 'react'\n// import ReactDOM from 'react-dom'\n\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nconst GifExpertApp = () => {\n\n    // const categories = ['One Punch', 'HxH', 'One Piece']\n    const [categories, setCategories] = useState([]);\n\n    // const handleAdd = () => {\n    //     setCategories(cats => [...categories, 'Black Clover']);\n    // }\n\n\n    return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n            \n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid\n                            key={category} \n                            category={category} \n                        />\n                    ))\n                }\n            </ol>\n        </Fragment>\n    )\n}\n\nexport {\n    GifExpertApp as default\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nconst divRoot = document.querySelector('#root');\n\n\nReactDOM.render(\n    <GifExpertApp />,\n    divRoot\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}